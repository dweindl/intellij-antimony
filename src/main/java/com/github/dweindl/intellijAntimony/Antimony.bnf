// See https://github.com/JetBrains/Grammar-Kit/tree/master
{
  parserClass="com.github.dweindl.intellijAntimony.parser.AntimonyParser"
  parserUtilClass="com.github.dweindl.intellijAntimony.parser.AntimonyParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Antimony"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.dweindl.intellijAntimony.psi"
  psiImplPackage="com.github.dweindl.intellijAntimony.psi.impl"

  elementTypeHolderClass="com.github.dweindl.intellijAntimony.psi.AntimonyTypes"
  elementTypeClass="com.github.dweindl.intellijAntimony.psi.AntimonyElementType"
  tokenTypeClass="com.github.dweindl.intellijAntimony.psi.AntimonyTokenType"

  psiImplUtilClass="com.github.dweindl.intellijAntimony.psi.impl.AntimonyPsiImplUtil"

  tokens=[
    SEMI=';'
    COLON=':'
    PRIME="'"
    COMMA=','
    MODEL='regexp:(model|module)'
    END='end'
    VAR='var'
    CONST='const'
    SPECIES='species'
    COMPARTMENT='compartment'
    SUBSTANCE_ONLY='substanceOnly'
    FUNCTION='function'
    IDENTITY='identity'
    PART='part'
    IS='is'
    IN='in'
    AT='at'
    NOTES='notes'
    HAS='has'
    UNIT_KEYWORD='unit'
    IMPORT='import'
    TIMECONV='timeconv'
    EXTENTCONV='extentconv'
    EOL = "regexp:\s*(\n|\r\n)\s*"
    WHITE_SPACE="regexp:[ \t\x0B\f\r]+"
    LINE_COMMENT = "regexp:(//|#).*"
    BLOCK_COMMENT="regexp:/\*([^*]|\*+[^*/])*(\*+/)"
    PLUS='+'
    MINUS='-'
    MUL='*'
    DIV='/'
    POW='^'
    LPAREN='('
    RPAREN=')'
    EQ='='
    ASSIGN_EQ=':='
    ID='regexp:[a-zA-Z_][a-zA-Z_0-9]*'
    INT='regexp:\d+'
    FLOAT='regexp:\d+\.\d*|\.\d+'
    SCIENTIFIC='regexp:(\d+(\.\d*)?|\.\d+)[eE][-+]?\d+'
    string="regexp:(\"([^\"\\]|\\.)*\")"
    MULTILINE_STRING="regexp:(```([^`]|`[^`]|``[^`])*```)"
    BACKSLASH='\'
    DOT='.'
    DOLLAR='$'
    // TODO: double-check operators
    AND='&&'
    OR='||'
    NOT='!'
    EQEQ='=='
    NEQ='!='
    LT='<'
    LTE='<='
    GT='>'
    GTE='>='
  ]
    name(".*expr")='expression'
    extends(".*expr")=expr
}

antimonyFile ::= root_item * <<eof>>
private root_item ::= (EOL | module | module_body | model_annotation)
module       ::= MODEL "*"? model_id ("(" function_signature_arguments? ")")? module_body? END {pin=1}
model_id     ::= identifier
module_body  ::= module_body_item +
private module_body_item ::=
    EOL
    | annotation
    | reaction
    | unit_annotation
    | declaration
    | unit_definition
    | modifier_annotation
    | event_definition
    | function_definition
    | model_import
    | file_import


declaration ::= declaration_prefix? rule_or_assignment ("," rule_or_assignment)* (SEMI | EOL | LINE_COMMENT)
private declaration_prefix ::= species_declaration_prefix | compartment_declaration_prefix | other_declaration_prefix
species_declaration_prefix ::= ("substanceOnly" "species") | (("var" | "const")? "species")
compartment_declaration_prefix ::=  ("var" | "const")? "compartment"
other_declaration_prefix ::=  ("var" | "const")?

rule_or_assignment ::= rate_rule | assignment | assignment_rule | just_declaration
rate_rule ::= identifier "'" EQ expr {pin=2}
assignment ::= identifier ("in" compartment_id)? "=" expr {pin=3}
just_declaration ::= identifier ("in" compartment_id)?
assignment_rule ::= identifier ("in" compartment_id)? ":=" expr {pin=3}
number_literal ::= ('+'|'-') ? (INT | FLOAT | SCIENTIFIC)

compartment_id ::= identifier
annotation ::= identifier ("notes" | "is" | "identity" | "part") (string | MULTILINE_STRING) ("," EOL? string)* (SEMI | EOL) {pin=2}
unit_annotation ::= identifier "has" unit_id (SEMI | EOL) {pin=2}
// TODO: needs to have a unit included
unit_definition ::= "unit" unit_id EQ expr (SEMI | EOL) {pin=1}
modifier_annotation ::= (modifier_id ":")? species_id ("-|" | "-o" | "-(") reaction_id (SEMI | EOL)
modifier_id ::= identifier


expr ::= logical_expr | arithmetic_expr
logical_expr ::= logical_term or_expr *
left or_expr ::= OR logical_term
logical_term ::= not_expr and_expr *
left and_expr ::= AND not_expr
not_expr ::= NOT? comparison_expr
comparison_expr ::= arithmetic_expr comparison_op? arithmetic_expr
comparison_op ::= EQEQ | NEQ | LT | LTE | GT | GTE

arithmetic_expr ::= (BACKSLASH EOL)* factor plus_expr *left plus_expr ::= plus_op factor
private plus_op ::= ('+'|'-') (BACKSLASH EOL)*
private factor ::= primary mul_expr * (BACKSLASH EOL)*
left mul_expr  ::= mul_op primary
private mul_op ::= ('*'|'/') (BACKSLASH EOL)*
private primary ::= primary_inner (BACKSLASH EOL)*  power_expr? // factorial_expr ?
left power_expr ::= '^' primary
private primary_inner ::= ('+'|'-') ? (literal_expr | function_call | ref_expr | paren_expr)
paren_expr ::= ('-(' | '(') expr ')' {pin=1}
ref_expr ::= identifier
literal_expr ::= number_literal unit_id ?
unit_id ::= identifier
function_call ::= function_id '(' function_arguments? ')' {pin=2}
function_arguments ::= expr (',' expr)*
function_id ::= identifier

identifier ::= ID {
    mixin="com.github.dweindl.intellijAntimony.psi.impl.AntimonyNamedElementImpl"
    implements="com.github.dweindl.intellijAntimony.psi.AntimonyNamedElement"
    methods=[getNameIdentifier getName setName getReference getReferences getPresentation getIcon]
}


reaction ::= (reaction_id ":")? reactants? ("->"|"=>") products? SEMI rate_expr (SEMI | EOL | <<eof>>)
reaction_id ::= identifier
reactants ::= list_of_reactants
products::= list_of_reactants
private list_of_reactants ::= species_expr (PLUS species_expr)*
species_expr ::= stoichiometry? "$"? species_id
stoichiometry ::= number_literal
species_id ::= identifier
rate_expr ::= expr

event_definition ::= event_trigger ":" (BACKSLASH EOL)* event_assignments (SEMI | EOL)
event_trigger ::= "at" expr
event_assignments ::= event_assignment ("," (BACKSLASH EOL)* event_assignment)*
event_assignment ::= identifier EQ expr


model_annotation ::= model_id annotation_type string (SEMI | EOL)
annotation_type ::= identifier "." identifier

function_definition ::= "function" function_id "(" function_signature_arguments? ")" (SEMI | EOL) expr (SEMI | EOL) "end" {pin=1}
function_signature_arguments ::= function_signature_argument ("," function_signature_argument)*
function_signature_argument ::= identifier

model_import ::= (model_id ":")? model_id ("(" function_signature_arguments? ")")? ("," "timeconv" "=" expr)? ("," "extentconv" "=" expr)? (SEMI | EOL)
file_import ::= "import" filename (SEMI | EOL)
filename ::= string

// TODO predefined units
// TODO predefined functions - min max exp...
// TODO: dotted IDs for imports
// TODO: conversion factors with "is" keyword
// TODO: "delete" keyword
// TODO: clearing rules
// TODO: $ for const species
// TODO: fbc, distrib, ...
// TODO: ``` for multiline strings
// TODO: "formula" keyword
// TODO: model annotations following "model" keyword