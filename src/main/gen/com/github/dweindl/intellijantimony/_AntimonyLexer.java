// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _AntimonyLexer.flex

package com.github.dweindl.intellijantimony;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.dweindl.intellijantimony.psi.AntimonyTypes.*;


public class _AntimonyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\12\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\0\4\27\1\30\25\27\1\0\1\31"+
    "\1\0\1\32\1\27\1\0\1\33\1\27\1\34\1\35"+
    "\1\36\1\37\1\27\1\40\1\41\2\27\1\42\1\43"+
    "\1\44\1\45\1\46\1\27\1\47\1\50\1\51\1\52"+
    "\1\53\4\27\1\0\1\54\10\0\1\55\u01a2\0\2\55"+
    "\326\0\u0100\55";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\12\24\1\1\1\27\1\0\1\30\1\0"+
    "\1\31\2\0\1\32\2\0\1\33\1\34\1\35\1\36"+
    "\1\37\4\24\1\40\1\41\5\24\1\42\2\0\1\43"+
    "\2\24\1\44\1\45\5\24\1\46\1\47\7\24\1\50"+
    "\1\24\1\51\1\24\1\52\1\24\1\53\6\24\1\54"+
    "\5\24\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\56\0\56\0\56\0\56\0\56\0\56\0\u019e"+
    "\0\u01cc\0\u01fa\0\u0228\0\56\0\u0256\0\u0284\0\u02b2\0\u02e0"+
    "\0\56\0\56\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\56\0\346\0\56"+
    "\0\u0508\0\56\0\u0170\0\u0536\0\u0564\0\u0592\0\u05c0\0\56"+
    "\0\56\0\56\0\56\0\u02e0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u02e0\0\u02e0\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\56"+
    "\0\u078c\0\u07ba\0\u07ba\0\u07e8\0\u0816\0\u02e0\0\u02e0\0\u0844"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u02e0\0\u0592\0\u092a\0\u0958"+
    "\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u02e0\0\u0a6c\0\u02e0"+
    "\0\u0a9a\0\u02e0\0\u0ac8\0\u02e0\0\u0af6\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u02e0\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u02e0\0\u02e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\30"+
    "\1\31\1\32\1\33\1\34\1\30\1\35\1\30\1\36"+
    "\1\37\1\30\1\40\1\41\3\30\1\42\1\30\1\43"+
    "\1\44\1\45\1\2\57\0\1\3\1\4\1\3\53\0"+
    "\3\4\77\0\1\46\30\0\5\47\1\50\23\47\1\51"+
    "\24\47\2\7\2\0\51\7\10\0\1\52\46\0\10\53"+
    "\1\50\20\53\1\54\24\53\21\0\1\55\47\0\1\56"+
    "\4\0\1\7\54\0\1\55\1\0\1\22\6\0\1\57"+
    "\5\0\1\57\44\0\1\60\55\0\1\61\55\0\1\62"+
    "\55\0\1\63\51\0\1\30\5\0\2\30\2\0\21\30"+
    "\23\0\1\30\5\0\2\30\2\0\16\30\1\64\2\30"+
    "\23\0\1\30\5\0\2\30\2\0\12\30\1\65\6\30"+
    "\23\0\1\30\5\0\2\30\2\0\11\30\1\66\7\30"+
    "\23\0\1\30\5\0\2\30\2\0\1\67\20\30\23\0"+
    "\1\30\5\0\2\30\2\0\2\30\1\70\6\30\1\71"+
    "\3\30\1\72\3\30\23\0\1\30\5\0\2\30\2\0"+
    "\12\30\1\73\6\30\23\0\1\30\5\0\2\30\2\0"+
    "\12\30\1\74\6\30\23\0\1\30\5\0\2\30\2\0"+
    "\13\30\1\75\5\30\23\0\1\30\5\0\2\30\2\0"+
    "\11\30\1\76\7\30\23\0\1\30\5\0\2\30\2\0"+
    "\1\77\20\30\56\0\1\100\1\0\2\47\2\0\51\47"+
    "\1\0\2\53\2\0\51\53\22\0\1\55\6\0\1\57"+
    "\5\0\1\57\17\0\13\56\1\101\42\56\14\0\1\102"+
    "\1\0\1\102\2\0\1\103\55\0\1\30\5\0\2\30"+
    "\2\0\10\30\1\104\1\105\7\30\23\0\1\30\5\0"+
    "\2\30\2\0\2\30\1\106\16\30\23\0\1\30\5\0"+
    "\2\30\2\0\15\30\1\107\3\30\23\0\1\30\5\0"+
    "\2\30\2\0\3\30\1\110\15\30\23\0\1\30\5\0"+
    "\2\30\2\0\2\30\1\111\16\30\23\0\1\30\5\0"+
    "\2\30\2\0\16\30\1\112\2\30\23\0\1\30\5\0"+
    "\2\30\2\0\3\30\1\113\15\30\23\0\1\30\5\0"+
    "\2\30\2\0\6\30\1\114\12\30\23\0\1\30\5\0"+
    "\2\30\2\0\14\30\1\115\4\30\2\0\13\56\1\101"+
    "\4\56\1\116\35\56\21\0\1\103\55\0\1\30\5\0"+
    "\2\30\2\0\13\30\1\117\5\30\23\0\1\30\5\0"+
    "\2\30\2\0\15\30\1\120\3\30\23\0\1\30\5\0"+
    "\2\30\2\0\11\30\1\121\7\30\23\0\1\30\5\0"+
    "\2\30\2\0\3\30\1\122\13\30\1\123\1\30\23\0"+
    "\1\30\5\0\2\30\2\0\3\30\1\124\15\30\23\0"+
    "\1\30\5\0\2\30\2\0\1\30\1\125\17\30\23\0"+
    "\1\30\5\0\2\30\2\0\16\30\1\126\2\30\23\0"+
    "\1\30\5\0\2\30\2\0\1\127\20\30\23\0\1\30"+
    "\5\0\2\30\2\0\16\30\1\130\2\30\23\0\1\30"+
    "\5\0\2\30\2\0\16\30\1\131\2\30\23\0\1\30"+
    "\5\0\2\30\2\0\7\30\1\132\11\30\23\0\1\30"+
    "\5\0\2\30\2\0\7\30\1\133\11\30\23\0\1\30"+
    "\5\0\2\30\2\0\15\30\1\134\3\30\23\0\1\30"+
    "\5\0\2\30\2\0\6\30\1\135\12\30\23\0\1\30"+
    "\5\0\2\30\2\0\14\30\1\136\4\30\23\0\1\30"+
    "\5\0\2\30\2\0\6\30\1\137\12\30\23\0\1\30"+
    "\5\0\2\30\2\0\3\30\1\132\15\30\23\0\1\30"+
    "\5\0\2\30\2\0\3\30\1\140\15\30\23\0\1\30"+
    "\5\0\2\30\2\0\16\30\1\141\2\30\23\0\1\30"+
    "\5\0\2\30\2\0\4\30\1\142\14\30\23\0\1\30"+
    "\5\0\2\30\2\0\15\30\1\143\3\30\23\0\1\30"+
    "\5\0\2\30\2\0\10\30\1\144\10\30\23\0\1\30"+
    "\5\0\2\30\2\0\6\30\1\145\12\30\23\0\1\30"+
    "\5\0\2\30\2\0\3\30\1\146\15\30\23\0\1\30"+
    "\5\0\2\30\2\0\3\30\1\147\15\30\23\0\1\30"+
    "\5\0\2\30\2\0\11\30\1\150\7\30\23\0\1\30"+
    "\5\0\2\30\2\0\14\30\1\151\4\30\23\0\1\30"+
    "\5\0\2\30\2\0\16\30\1\152\2\30\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3312];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\6\11\4\1\1\11\4\1\2\11"+
    "\13\1\1\11\1\0\1\11\1\0\1\11\2\0\1\1"+
    "\2\0\4\11\14\1\1\11\2\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _AntimonyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AntimonyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 47: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 3:
            { return EOL;
            }
          // fall through
          case 49: break;
          case 4:
            { return NOT;
            }
          // fall through
          case 50: break;
          case 5:
            { return LINE_COMMENT;
            }
          // fall through
          case 51: break;
          case 6:
            { return PRIME;
            }
          // fall through
          case 52: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 53: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 54: break;
          case 9:
            { return MUL;
            }
          // fall through
          case 55: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 56: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 57: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 58: break;
          case 13:
            { return DIV;
            }
          // fall through
          case 59: break;
          case 14:
            { return INT;
            }
          // fall through
          case 60: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 61: break;
          case 16:
            { return SEMI;
            }
          // fall through
          case 62: break;
          case 17:
            { return LT;
            }
          // fall through
          case 63: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 64: break;
          case 19:
            { return GT;
            }
          // fall through
          case 65: break;
          case 20:
            { return ID;
            }
          // fall through
          case 66: break;
          case 21:
            { return BACKSLASH;
            }
          // fall through
          case 67: break;
          case 22:
            { return POW;
            }
          // fall through
          case 68: break;
          case 23:
            { return NEQ;
            }
          // fall through
          case 69: break;
          case 24:
            { return STRING;
            }
          // fall through
          case 70: break;
          case 25:
            { return AND;
            }
          // fall through
          case 71: break;
          case 26:
            { return FLOAT;
            }
          // fall through
          case 72: break;
          case 27:
            { return ASSIGN_EQ;
            }
          // fall through
          case 73: break;
          case 28:
            { return LTE;
            }
          // fall through
          case 74: break;
          case 29:
            { return EQEQ;
            }
          // fall through
          case 75: break;
          case 30:
            { return GTE;
            }
          // fall through
          case 76: break;
          case 31:
            { return AT;
            }
          // fall through
          case 77: break;
          case 32:
            { return IN;
            }
          // fall through
          case 78: break;
          case 33:
            { return IS;
            }
          // fall through
          case 79: break;
          case 34:
            { return OR;
            }
          // fall through
          case 80: break;
          case 35:
            { return SCIENTIFIC;
            }
          // fall through
          case 81: break;
          case 36:
            { return END;
            }
          // fall through
          case 82: break;
          case 37:
            { return HAS;
            }
          // fall through
          case 83: break;
          case 38:
            { return VAR;
            }
          // fall through
          case 84: break;
          case 39:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 85: break;
          case 40:
            { return UNIT_KEYWORD;
            }
          // fall through
          case 86: break;
          case 41:
            { return CONST;
            }
          // fall through
          case 87: break;
          case 42:
            { return MODEL;
            }
          // fall through
          case 88: break;
          case 43:
            { return NOTES;
            }
          // fall through
          case 89: break;
          case 44:
            { return SPECIES;
            }
          // fall through
          case 90: break;
          case 45:
            { return IDENTIFIER;
            }
          // fall through
          case 91: break;
          case 46:
            { return COMPARTMENT;
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
